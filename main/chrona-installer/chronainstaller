#!/bin/sh

PROGRAM=chronainstaller
VERSION=1.04

PREFIX=/usr
: ${LIBDIR=$PREFIX/lib}
. "$LIBDIR/libalpine.sh"

if [ -t 1 ]; then
	COLCYAN="\e[36m"
	COLWHITE="\e[97m"
	COLRESET="\e[0m"
else
	COLCYAN=""
	COLWHITE=""
	COLRESET=""
fi

print_heading1() {
	printf "${COLCYAN}%s${COLRESET}\n" "$1"
}

print_heading2() {
    printf "${COLWHITE}%s${COLRESET}\n" "$1"
}

is_kvm_clock() {
	grep -q "kvm-clock" "$ROOT"sys/devices/system/clocksource/clocksource0/current_clocksource 2>/dev/null
}

is_virtual_console() {
	case "$(readlink "$ROOT"/proc/self/fd/0)" in
		/dev/tty[0-9]*) return 0;;
	esac
	return 1
}

usage() {
	cat <<-__EOF__
		usage: chronainstaller [-ahq] [-c FILE | -f FILE]

		Setup Chrona Linux

		options:
		 -a  Create Chrona Linux overlay file
		 -c  Create answer file (do not install anything)
		 -e  Empty root password
		 -f  Answer file to use installation
		 -h  Show this help
		 -q  Quick mode. Ask fewer questions.
	__EOF__
	exit $1
}

while getopts "aef:c:hq" opt ; do
	case $opt in
		a) ARCHIVE=yes;;
		f) USEANSWERFILE="$OPTARG";;
		c) CREATEANSWERFILE="$OPTARG";;
		e) empty_root_password=1;;
		h) usage 0;;
		q) empty_root_password=1; quick=1; APKREPOSOPTS="-1"; HOSTNAMEOPTS="alpine";;
		'?') usage "1" >&2;;
	esac
done
shift $(expr $OPTIND - 1)

rc_sys=$(openrc --sys)
if [ "$rc_sys" = "XENU" ] && ! grep -q '^xenfs' /proc/mounts; then
	modprobe xenfs
	mount -t xenfs xenfs /proc/xen
fi

case "$USEANSWERFILE" in
	http*://*|ftp://*)
		if ! rc-service networking --quiet status; then
			setup-interfaces -ar
		fi
		temp="$(mktemp)"
		wget -qO "$temp" "$USEANSWERFILE" || die "Failed to download '$USEANSWERFILE'"
		USEANSWERFILE="$temp"
		;;
	*)
		[ -n "$USEANSWERFILE" ] && USEANSWERFILE=$(realpath "$USEANSWERFILE")
		;;
esac
if [ -n "$USEANSWERFILE" ] && [ -e "$USEANSWERFILE" ]; then
	. "$USEANSWERFILE"
fi

if [ -n "$CREATEANSWERFILE" ]; then
	touch "$CREATEANSWERFILE" || echo "Cannot touch file $CREATEANSWERFILE"
	cat > "$CREATEANSWERFILE" <<-__EOF__
		# Example answer file for chronainstaller script

		KEYMAPOPTS=none
		HOSTNAMEOPTS=chrona
		DEVDOPTS=mdev
		INTERFACESOPTS="auto lo
		iface lo inet loopback

		auto eth0
		iface eth0 inet dhcp
		hostname chrona-test
		"
		TIMEZONEOPTS=none
		PROXYOPTS=none
		APKREPOSOPTS="-1"
		USEROPTS="-a -u -g audio,input,video,netdev juser"
		SSHDOPTS=openssh
		NTPOPTS=none
		DISKOPTS=none
		LBUOPTS=none
		APKCACHEOPTS=none
	__EOF__
	echo "Answer file $CREATEANSWERFILE has been created. Please edit it as desired."
	exit 0
fi

printf "\n\n"
print_heading1 " CHRONA LINUX INSTALLER [BETA]"
print_heading1 "----------------------"

if [ "$ARCHIVE" ] ; then
	echo "Creating an Chrona overlay"
	init_tmpdir ROOT
else
	PKGADD="apk add"
fi

if [ "$rc_sys" != LXC ]; then
	if is_virtual_console || [ -n "$KEYMAPOPTS" ]; then
		echo
		print_heading2 " Keymap"
		print_heading2 "--------"
		setup-keymap ${KEYMAPOPTS}
	fi

	echo
	print_heading2 " Hostname"
	print_heading2 "----------"
	setup-hostname ${HOSTNAMEOPTS} && [ -z "$SSH_CONNECTION" ] && rc-service hostname --quiet restart
fi

[ -z "$SSH_CONNECTION" ] && rst_if=1
if [ -n "$INTERFACESOPTS" ]; then
	if [ "$INTERFACESOPTS" != none ]; then
		printf "$INTERFACESOPTS" | setup-interfaces -i ${rst_if:+-r}
	fi
else
	echo
	print_heading2 " Interface"
	print_heading2 "-----------"
	setup-interfaces ${quick:+-a} ${rst_if:+-r}
fi

if [ -f "$ROOT"/etc/network/interfaces ] && ! grep -q '^iface.*dhcp' "$ROOT"/etc/network/interfaces; then
	setup-dns ${DNSOPTS}
fi

if [ -z "$empty_root_password" ]; then
	echo
	print_heading2 " Root Password"
	print_heading2 "---------------"
	while ! $MOCK passwd ; do
		echo "Please retry."
	done
fi

if [ -z "$quick" ]; then
	echo
	print_heading2 " Timezone"
	print_heading2 "----------"
	setup-timezone ${TIMEZONEOPTS}
fi

echo
rc-update --quiet add networking boot
rc-update --quiet add seedrng boot || rc-update --quiet add urandom boot
svc_list="cron crond"
if [ -e /dev/input/event0 ]; then
	svc_list="$svc_list acpid"
fi
for svc in $svc_list; do
	if rc-service --exists $svc; then
		rc-update --quiet add $svc
	fi
done

$MOCK openrc ${SSH_CONNECTION:+-n} boot
$MOCK openrc ${SSH_CONNECTION:+-n} default

_dn=$(sed -n \
-e '/^domain[[:space:]][[:space:]]*/{s///;s/\([^[:space:]]*\).*$/\1/;h;}' \
-e '/^search[[:space:]][[:space:]]*/{s///;s/\([^[:space:]]*\).*$/\1/;h;}' \
-e '${g;p;}' "$ROOT"/etc/resolv.conf 2>/dev/null)

_hn=$(hostname)
_hn=${_hn%%.*}

sed -i -e "s/^127\.0\.0\.1.*/127.0.0.1\t${_hn}.${_dn:-$(get_fqdn my.domain)} ${_hn} localhost.localdomain localhost/" \
	"$ROOT"/etc/hosts 2>/dev/null

if ! is_kvm_clock && [ "$rc_sys" != "LXC" ] && [ "$quick" != 1 ]; then
	echo
	print_heading2 " Network Time Protocol"
	print_heading2 "-----------------------"
	setup-ntp ${NTPOPTS}
fi

if [ "$rc_sys" != LXC ] && [ -n "$DEVDOPTS" ] && [ "$DEVDOPTS" != mdev ]; then
	setup-devd ${DEVDOPTS}
fi

if [ "$quick" = 1 ]; then
	exit 0
fi

echo
print_heading2 " User"
print_heading2 "------"
ci-setup-user ${USERSSHKEY+-k "$USERSSHKEY"} ${USEROPTS:--a -g 'audio input video netdev'}
for i in "$ROOT"home/*; do
	if [ -d "$i" ]; then
		lbu add $i
	fi
done

setup-sshd ${ROOTSSHKEY+-k "$ROOTSSHKEY"} ${SSHDOPTS}
root_keys="$ROOT"/root/.ssh/authorized_keys
if [ -f "$root_keys" ]; then
	lbu add "$ROOT"/root
fi

if is_xen_dom0; then
	echo
	print_heading2 " Xen"
	print_heading2 "-----"
	setup-xen-dom0 ${XENDOM0OPTS}
fi

if [ "$rc_sys" = "LXC" ]; then
	exit 0
fi

echo
print_heading2 " Disk & Install"
print_heading2 "----------------"
DEFAULT_DISK=none \
	ci-disk -w /tmp/alpine-install-diskmode.out -q ${DISKOPTS} || exit

diskmode=$(cat /tmp/alpine-install-diskmode.out 2>/dev/null)

echo "Press any key to Rebooting in 5 seconds..."
read -s -n 1
i=5; while [ $i -gt 0 ]; do echo "Rebooting in $i seconds..."; sleep 1; i=$((i-1)); done; reboot

